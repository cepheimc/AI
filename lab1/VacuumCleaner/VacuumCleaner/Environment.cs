using System;

namespace VacuumCleaner
{
    public class Environment
    {
        public int dirtyDegree = 0;
        public int consumedEnergy = 0;

        private string[,] map;

        string[,] original = { 
            {   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0" },
            {   "0", "-", "-", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "-", "0", "0", "0", "0", "0", "0", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "0", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "0", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "0", "-", "0" },
            {   "0", "-", "0", "0", "-", "0", "0", "0", "-", "0" },
            {   "0", "-", "-", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0" }
        };
        
        string[,] map2 = { 
            {   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0" },
            {   "0", "-", "-", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "-", "0", "0", "0", "0", "0", "0", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "0", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "0", "-", "0" },
            {   "0", "-", "0", "0", "0", "0", "0", "0", "-", "0" },
            {   "0", "-", "0", "0", "0", "0", "0", "0", "-", "0" },
            {   "0", "-", "-", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0" }
        };
        
        string[,] map3 = { 
            {   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0" },
            {   "0", "-", "-", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "-", "0", "-", "0", "0", "0", "0", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "0", "-", "0" },
            {   "0", "-", "0", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "-", "0", "0", "0", "-", "-", "0", "-", "0" },
            {   "0", "-", "-", "-", "-", "-", "-", "-", "-", "0" },
            {   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0" }
        };
        
        public string[,] states = { 
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
            {   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" }
        };

        public Environment(int i)
        {
            if (i == 1)
                map = original;
            
            if (i == 2)
                map = map2;
            
            if (i == 3)
                map = map3;
        }
        public void Print(int x, int y)
        {
            Console.Clear();
            for (int i = 0; i < 10; i++)
            {
                for (int j = 0; j < 10; j++)
                {
                    if(i==x && j == y){
                        Console.ForegroundColor = ConsoleColor.Blue;
                        Console.Write("@");
                    }
                    else
                    {
                        if (map[i, j] == "0")
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.Write(map[i,j]);
                        }
                        else
                        {
                            if (map[i, j] == "X")
                            {
                                Console.ForegroundColor = ConsoleColor.DarkGray;
                                Console.Write(map[i,j]);
                            }
                            else
                            {
                                Console.ForegroundColor = ConsoleColor.Green;
                                Console.Write(map[i,j]);
                            }
                        }
                    }
                    
                }
                Console.WriteLine();
            }
        }
        
        public bool CanMove(int x, int y)
        {
            if ((map[x, y] == "-" || map[x, y] == "X")) 
                return true;
            return false;
        }
        
        public bool IsRubbish(int x, int y)
        {
            if ( map[x, y] == "X") 
                return true;
            return false;
        }
        
        public void ClearRubbish(int x, int y)
        {
            for (int i = 0; i < 10; i++)
            {
                for (int j = 0; j < 10; j++)
                {
                    if (i == x && j == y)
                    {
                        map[i, j] = "-";
                        consumedEnergy += 2;
                    }
                }
            }
        }
        
        public void AddRubbish()
        {
            Random rnd = new Random();
            
            int xx, yy;
            do
            {
                xx = rnd.Next() % 10;
                yy = rnd.Next() % 10;
            } while (map[xx, yy] != "-");
            map[xx, yy] = "X";
            dirtyDegree++;
        }
    }
}